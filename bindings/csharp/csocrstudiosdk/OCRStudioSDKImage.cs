//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace ocrstudio {

  using ocrstudio;

public class OCRStudioSDKImage : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal OCRStudioSDKImage(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(OCRStudioSDKImage obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(OCRStudioSDKImage obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~OCRStudioSDKImage() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csocrstudiosdkPINVOKE.delete_OCRStudioSDKImage(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static int PagesCount(string filename) {
    int ret = csocrstudiosdkPINVOKE.OCRStudioSDKImage_PagesCount(filename);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OCRStudioSDKString PageName(string filename, int page_number) {
    OCRStudioSDKString ret = new OCRStudioSDKString(csocrstudiosdkPINVOKE.OCRStudioSDKImage_PageName(filename, page_number), true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OCRStudioSDKImage CreateEmpty() {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKImage_CreateEmpty();
    OCRStudioSDKImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKImage(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OCRStudioSDKImage CreateFromFile(string filename, int page_number, int max_width, int max_height) {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKImage_CreateFromFile__SWIG_0(filename, page_number, max_width, max_height);
    OCRStudioSDKImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKImage(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OCRStudioSDKImage CreateFromFile(string filename, int page_number, int max_width) {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKImage_CreateFromFile__SWIG_1(filename, page_number, max_width);
    OCRStudioSDKImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKImage(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OCRStudioSDKImage CreateFromFile(string filename, int page_number) {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKImage_CreateFromFile__SWIG_2(filename, page_number);
    OCRStudioSDKImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKImage(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OCRStudioSDKImage CreateFromFile(string filename) {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKImage_CreateFromFile__SWIG_3(filename);
    OCRStudioSDKImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKImage(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OCRStudioSDKImage CreateFromFileBuffer(byte[] data, int data_size, int page_number, int max_width, int max_height) {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKImage_CreateFromFileBuffer__SWIG_0(data, data_size, page_number, max_width, max_height);
    OCRStudioSDKImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKImage(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OCRStudioSDKImage CreateFromFileBuffer(byte[] data, int data_size, int page_number, int max_width) {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKImage_CreateFromFileBuffer__SWIG_1(data, data_size, page_number, max_width);
    OCRStudioSDKImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKImage(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OCRStudioSDKImage CreateFromFileBuffer(byte[] data, int data_size, int page_number) {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKImage_CreateFromFileBuffer__SWIG_2(data, data_size, page_number);
    OCRStudioSDKImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKImage(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OCRStudioSDKImage CreateFromFileBuffer(byte[] data, int data_size) {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKImage_CreateFromFileBuffer__SWIG_3(data, data_size);
    OCRStudioSDKImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKImage(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OCRStudioSDKImage CreateFromBase64FileBuffer(string base64_data, int page_number, int max_width, int max_height) {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKImage_CreateFromBase64FileBuffer__SWIG_0(base64_data, page_number, max_width, max_height);
    OCRStudioSDKImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKImage(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OCRStudioSDKImage CreateFromBase64FileBuffer(string base64_data, int page_number, int max_width) {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKImage_CreateFromBase64FileBuffer__SWIG_1(base64_data, page_number, max_width);
    OCRStudioSDKImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKImage(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OCRStudioSDKImage CreateFromBase64FileBuffer(string base64_data, int page_number) {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKImage_CreateFromBase64FileBuffer__SWIG_2(base64_data, page_number);
    OCRStudioSDKImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKImage(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OCRStudioSDKImage CreateFromBase64FileBuffer(string base64_data) {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKImage_CreateFromBase64FileBuffer__SWIG_3(base64_data);
    OCRStudioSDKImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKImage(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OCRStudioSDKImage CreateFromPixelBuffer(byte[] data, int data_size, int width, int height, int bytes_per_line, int bytes_per_channel, OCRStudioSDKPixelFormat pixel_format) {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKImage_CreateFromPixelBuffer(data, data_size, width, height, bytes_per_line, bytes_per_channel, (int)pixel_format);
    OCRStudioSDKImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKImage(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OCRStudioSDKImage CreateFromBuffer(byte[] data, int data_size, int width, int height, int bytes_per_line, int channels) {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKImage_CreateFromBuffer(data, data_size, width, height, bytes_per_line, channels);
    OCRStudioSDKImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKImage(cPtr, false);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OCRStudioSDKImage CreateFromYUVSimple(byte[] yuv_data, int yuv_data_size, int width, int height) {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKImage_CreateFromYUVSimple(yuv_data, yuv_data_size, width, height);
    OCRStudioSDKImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKImage(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OCRStudioSDKImage CreateFromYUV(byte[] y_plane, int y_plane_size, int y_plane_row_stride, int y_plane_pixel_stride, byte[] u_plane, int u_plane_size, int u_plane_row_stride, int u_plane_pixel_stride, byte[] v_plane, int v_plane_size, int v_plane_row_stride, int v_plane_pixel_stride, int width, int height, OCRStudioSDKYUVFormat yuv_format) {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKImage_CreateFromYUV(y_plane, y_plane_size, y_plane_row_stride, y_plane_pixel_stride, u_plane, u_plane_size, u_plane_row_stride, u_plane_pixel_stride, v_plane, v_plane_size, v_plane_row_stride, v_plane_pixel_stride, width, height, (int)yuv_format);
    OCRStudioSDKImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKImage(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OCRStudioSDKImage DeepCopy() {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKImage_DeepCopy(swigCPtr);
    OCRStudioSDKImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKImage(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OCRStudioSDKImage ShallowCopy() {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKImage_ShallowCopy(swigCPtr);
    OCRStudioSDKImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKImage(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Clear() {
    csocrstudiosdkPINVOKE.OCRStudioSDKImage_Clear(swigCPtr);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int ExportPixelBufferLength() {
    int ret = csocrstudiosdkPINVOKE.OCRStudioSDKImage_ExportPixelBufferLength(swigCPtr);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int ExportPixelBuffer(byte[] export_buffer, int export_buffer_length) {
    int ret = csocrstudiosdkPINVOKE.OCRStudioSDKImage_ExportPixelBuffer(swigCPtr, export_buffer, export_buffer_length);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OCRStudioSDKString ExportBase64JPEG() {
    OCRStudioSDKString ret = new OCRStudioSDKString(csocrstudiosdkPINVOKE.OCRStudioSDKImage_ExportBase64JPEG(swigCPtr), true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Scale(int width, int height) {
    csocrstudiosdkPINVOKE.OCRStudioSDKImage_Scale(swigCPtr, width, height);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual OCRStudioSDKImage DeepCopyScaled(int width, int height) {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKImage_DeepCopyScaled(swigCPtr, width, height);
    OCRStudioSDKImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKImage(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void CropByQuad(string quad_json, int width, int height) {
    csocrstudiosdkPINVOKE.OCRStudioSDKImage_CropByQuad(swigCPtr, quad_json, width, height);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual OCRStudioSDKImage DeepCopyCroppedByQuad(string quad_json, int width, int height) {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKImage_DeepCopyCroppedByQuad(swigCPtr, quad_json, width, height);
    OCRStudioSDKImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKImage(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void CropByRect(int x, int y, int width, int height) {
    csocrstudiosdkPINVOKE.OCRStudioSDKImage_CropByRect(swigCPtr, x, y, width, height);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual OCRStudioSDKImage DeepCopyCroppedByRect(int x, int y, int width, int height) {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKImage_DeepCopyCroppedByRect(swigCPtr, x, y, width, height);
    OCRStudioSDKImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKImage(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OCRStudioSDKImage ShallowCopyCroppedByRect(int x, int y, int width, int height) {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKImage_ShallowCopyCroppedByRect(swigCPtr, x, y, width, height);
    OCRStudioSDKImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKImage(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void RotateByNinety(int num_rotations) {
    csocrstudiosdkPINVOKE.OCRStudioSDKImage_RotateByNinety(swigCPtr, num_rotations);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual OCRStudioSDKImage DeepCopyRotatedByNinety(int num_rotations) {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKImage_DeepCopyRotatedByNinety(swigCPtr, num_rotations);
    OCRStudioSDKImage ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKImage(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int Width() {
    int ret = csocrstudiosdkPINVOKE.OCRStudioSDKImage_Width(swigCPtr);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int Height() {
    int ret = csocrstudiosdkPINVOKE.OCRStudioSDKImage_Height(swigCPtr);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int BytesPerLine() {
    int ret = csocrstudiosdkPINVOKE.OCRStudioSDKImage_BytesPerLine(swigCPtr);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int Channels() {
    int ret = csocrstudiosdkPINVOKE.OCRStudioSDKImage_Channels(swigCPtr);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool OwnsPixelData() {
    bool ret = csocrstudiosdkPINVOKE.OCRStudioSDKImage_OwnsPixelData(swigCPtr);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void ForcePixelDataOwnership() {
    csocrstudiosdkPINVOKE.OCRStudioSDKImage_ForcePixelDataOwnership(swigCPtr);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
