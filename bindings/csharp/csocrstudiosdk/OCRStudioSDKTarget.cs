//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace ocrstudio {

  using ocrstudio;

public class OCRStudioSDKTarget : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal OCRStudioSDKTarget(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(OCRStudioSDKTarget obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(OCRStudioSDKTarget obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~OCRStudioSDKTarget() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csocrstudiosdkPINVOKE.delete_OCRStudioSDKTarget(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual OCRStudioSDKTarget DeepCopy() {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKTarget_DeepCopy(swigCPtr);
    OCRStudioSDKTarget ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKTarget(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string Description() {
    string ret = csocrstudiosdkPINVOKE.OCRStudioSDKTarget_Description(swigCPtr);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int ItemsCountByType(string item_type) {
    int ret = csocrstudiosdkPINVOKE.OCRStudioSDKTarget_ItemsCountByType(swigCPtr, item_type);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasItem(string item_type, string item_name) {
    bool ret = csocrstudiosdkPINVOKE.OCRStudioSDKTarget_HasItem(swigCPtr, item_type, item_name);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OCRStudioSDKItem Item(string item_type, string item_name) {
    OCRStudioSDKItem ret = new OCRStudioSDKItem(csocrstudiosdkPINVOKE.OCRStudioSDKTarget_Item(swigCPtr, item_type, item_name), false);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OCRStudioSDKItemIterator ItemsBegin(string item_type) {
    OCRStudioSDKItemIterator ret = new OCRStudioSDKItemIterator(csocrstudiosdkPINVOKE.OCRStudioSDKTarget_ItemsBegin(swigCPtr, item_type), true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OCRStudioSDKItemIterator ItemsEnd(string item_type) {
    OCRStudioSDKItemIterator ret = new OCRStudioSDKItemIterator(csocrstudiosdkPINVOKE.OCRStudioSDKTarget_ItemsEnd(swigCPtr, item_type), true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool IsFinal() {
    bool ret = csocrstudiosdkPINVOKE.OCRStudioSDKTarget_IsFinal(swigCPtr);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
