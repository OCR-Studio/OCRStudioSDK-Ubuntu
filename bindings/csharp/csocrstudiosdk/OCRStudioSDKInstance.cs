//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace ocrstudio {

  using ocrstudio;

public class OCRStudioSDKInstance : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal OCRStudioSDKInstance(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(OCRStudioSDKInstance obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(OCRStudioSDKInstance obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~OCRStudioSDKInstance() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csocrstudiosdkPINVOKE.delete_OCRStudioSDKInstance(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static OCRStudioSDKInstance CreateStandalone(string json_instance_init_params) {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKInstance_CreateStandalone__SWIG_0(json_instance_init_params);
    OCRStudioSDKInstance ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKInstance(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OCRStudioSDKInstance CreateStandalone() {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKInstance_CreateStandalone__SWIG_1();
    OCRStudioSDKInstance ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKInstance(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OCRStudioSDKInstance CreateFromPath(string configuration_filename, string json_instance_init_params) {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKInstance_CreateFromPath__SWIG_0(configuration_filename, json_instance_init_params);
    OCRStudioSDKInstance ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKInstance(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OCRStudioSDKInstance CreateFromPath(string configuration_filename) {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKInstance_CreateFromPath__SWIG_1(configuration_filename);
    OCRStudioSDKInstance ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKInstance(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OCRStudioSDKInstance CreateFromBuffer(byte[] configuration_buffer, int configuration_buffer_size, string json_instance_init_params) {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKInstance_CreateFromBuffer__SWIG_0(configuration_buffer, configuration_buffer_size, json_instance_init_params);
    OCRStudioSDKInstance ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKInstance(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OCRStudioSDKInstance CreateFromBuffer(byte[] configuration_buffer, int configuration_buffer_size) {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKInstance_CreateFromBuffer__SWIG_1(configuration_buffer, configuration_buffer_size);
    OCRStudioSDKInstance ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKInstance(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string LibraryVersion() {
    string ret = csocrstudiosdkPINVOKE.OCRStudioSDKInstance_LibraryVersion();
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string Description() {
    string ret = csocrstudiosdkPINVOKE.OCRStudioSDKInstance_Description(swigCPtr);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OCRStudioSDKSession CreateSession(string authorization_signature, string json_session_params, OCRStudioSDKDelegate callback_delegate) {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKInstance_CreateSession__SWIG_0(swigCPtr, authorization_signature, json_session_params, OCRStudioSDKDelegate.getCPtr(callback_delegate));
    OCRStudioSDKSession ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKSession(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OCRStudioSDKSession CreateSession(string authorization_signature, string json_session_params) {
    global::System.IntPtr cPtr = csocrstudiosdkPINVOKE.OCRStudioSDKInstance_CreateSession__SWIG_1(swigCPtr, authorization_signature, json_session_params);
    OCRStudioSDKSession ret = (cPtr == global::System.IntPtr.Zero) ? null : new OCRStudioSDKSession(cPtr, true);
    if (csocrstudiosdkPINVOKE.SWIGPendingException.Pending) throw csocrstudiosdkPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
